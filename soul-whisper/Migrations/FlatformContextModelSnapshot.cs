// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using soul_whisper.Data;

#nullable disable

namespace soul_whisper.Migrations
{
    [DbContext(typeof(FlatformContext))]
    partial class FlatformContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("soul_whisper.Models.Private.Data.Achievement", b =>
                {
                    b.Property<Guid?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("activationStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dateEarned")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("doctorid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("modifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("doctorid");

                    b.ToTable("Achievement");
                });

            modelBuilder.Entity("soul_whisper.Models.Private.Data.Achievement_Image", b =>
                {
                    b.Property<Guid?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("belongToid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("belongToid");

                    b.ToTable("Achievement_Image");
                });

            modelBuilder.Entity("soul_whisper.Models.Private.Data.Achievement_Registration", b =>
                {
                    b.Property<Guid?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("expiredAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("registeredid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("registeredid");

                    b.ToTable("Achievement_Registration");
                });

            modelBuilder.Entity("soul_whisper.Models.Private.Data.Admin", b =>
                {
                    b.Property<Guid?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("activationStatus")
                        .HasColumnType("int");

                    b.Property<DateOnly>("birthday")
                        .HasColumnType("date");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("gender")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("email")
                        .IsUnique();

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("soul_whisper.Models.Private.Data.Appointment", b =>
                {
                    b.Property<Guid?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("doctorid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("endTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("patientid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("prescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("startTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("doctorid");

                    b.HasIndex("patientid");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("soul_whisper.Models.Private.Data.Appointment_Registration", b =>
                {
                    b.Property<Guid?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("appointmentid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("doctorid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("modifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("patientid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("status")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("appointmentid");

                    b.HasIndex("doctorid");

                    b.HasIndex("patientid");

                    b.ToTable("Appointment_Registration");
                });

            modelBuilder.Entity("soul_whisper.Models.Private.Data.Doctor", b =>
                {
                    b.Property<Guid?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("activationStatus")
                        .HasColumnType("int");

                    b.Property<string>("avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("birthday")
                        .HasColumnType("date");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("gender")
                        .HasColumnType("int");

                    b.Property<decimal>("moneyInWallet")
                        .HasColumnType("Money");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("specialty")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("email")
                        .IsUnique();

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("soul_whisper.Models.Private.Data.Doctorship_Registration", b =>
                {
                    b.Property<Guid?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("expiredAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Doctorship_Registration");
                });

            modelBuilder.Entity("soul_whisper.Models.Private.Data.Exercise", b =>
                {
                    b.Property<Guid?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("duration")
                        .HasColumnType("TIME");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Exercise");
                });

            modelBuilder.Entity("soul_whisper.Models.Private.Data.Habit", b =>
                {
                    b.Property<Guid?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("patientid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("patientid");

                    b.ToTable("Habit");
                });

            modelBuilder.Entity("soul_whisper.Models.Private.Data.Message", b =>
                {
                    b.Property<Guid?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("receiver")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("sender")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("soul_whisper.Models.Private.Data.Patient", b =>
                {
                    b.Property<Guid?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("activationStatus")
                        .HasColumnType("int");

                    b.Property<DateOnly>("birthday")
                        .HasColumnType("date");

                    b.Property<string>("bloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("gender")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("email")
                        .IsUnique();

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("soul_whisper.Models.Private.Data.Rating", b =>
                {
                    b.Property<Guid?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("doctorid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("modifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("patientid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("value")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("doctorid");

                    b.HasIndex("patientid");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("soul_whisper.Models.Private.Data.Receipt", b =>
                {
                    b.Property<Guid?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("amount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("doctorid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("patientid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("doctorid");

                    b.HasIndex("patientid");

                    b.ToTable("Receipt");
                });

            modelBuilder.Entity("soul_whisper.Models.Private.Data.Rule", b =>
                {
                    b.Property<Guid?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Rule");
                });

            modelBuilder.Entity("soul_whisper.Models.Private.Data.Achievement", b =>
                {
                    b.HasOne("soul_whisper.Models.Private.Data.Doctor", "doctor")
                        .WithMany("achievements")
                        .HasForeignKey("doctorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("doctor");
                });

            modelBuilder.Entity("soul_whisper.Models.Private.Data.Achievement_Image", b =>
                {
                    b.HasOne("soul_whisper.Models.Private.Data.Achievement", "belongTo")
                        .WithMany("images")
                        .HasForeignKey("belongToid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("belongTo");
                });

            modelBuilder.Entity("soul_whisper.Models.Private.Data.Achievement_Registration", b =>
                {
                    b.HasOne("soul_whisper.Models.Private.Data.Achievement", "registered")
                        .WithMany("registrations")
                        .HasForeignKey("registeredid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("registered");
                });

            modelBuilder.Entity("soul_whisper.Models.Private.Data.Appointment", b =>
                {
                    b.HasOne("soul_whisper.Models.Private.Data.Doctor", "doctor")
                        .WithMany("appointments")
                        .HasForeignKey("doctorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("soul_whisper.Models.Private.Data.Patient", "patient")
                        .WithMany("appointments")
                        .HasForeignKey("patientid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("doctor");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("soul_whisper.Models.Private.Data.Appointment_Registration", b =>
                {
                    b.HasOne("soul_whisper.Models.Private.Data.Appointment", "appointment")
                        .WithMany()
                        .HasForeignKey("appointmentid");

                    b.HasOne("soul_whisper.Models.Private.Data.Doctor", "doctor")
                        .WithMany("appointmentRegistrations")
                        .HasForeignKey("doctorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("soul_whisper.Models.Private.Data.Patient", "patient")
                        .WithMany("appointmentRegistrations")
                        .HasForeignKey("patientid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("appointment");

                    b.Navigation("doctor");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("soul_whisper.Models.Private.Data.Doctorship_Registration", b =>
                {
                    b.HasOne("soul_whisper.Models.Private.Data.Doctor", "registrant")
                        .WithMany()
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("registrant");
                });

            modelBuilder.Entity("soul_whisper.Models.Private.Data.Habit", b =>
                {
                    b.HasOne("soul_whisper.Models.Private.Data.Patient", "patient")
                        .WithMany("habits")
                        .HasForeignKey("patientid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patient");
                });

            modelBuilder.Entity("soul_whisper.Models.Private.Data.Rating", b =>
                {
                    b.HasOne("soul_whisper.Models.Private.Data.Doctor", "doctor")
                        .WithMany("ratings")
                        .HasForeignKey("doctorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("soul_whisper.Models.Private.Data.Patient", "patient")
                        .WithMany("doctorRatings")
                        .HasForeignKey("patientid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("doctor");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("soul_whisper.Models.Private.Data.Receipt", b =>
                {
                    b.HasOne("soul_whisper.Models.Private.Data.Doctor", "doctor")
                        .WithMany("receipts")
                        .HasForeignKey("doctorid");

                    b.HasOne("soul_whisper.Models.Private.Data.Patient", "patient")
                        .WithMany("receipts")
                        .HasForeignKey("patientid");

                    b.Navigation("doctor");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("soul_whisper.Models.Private.Data.Achievement", b =>
                {
                    b.Navigation("images");

                    b.Navigation("registrations");
                });

            modelBuilder.Entity("soul_whisper.Models.Private.Data.Doctor", b =>
                {
                    b.Navigation("achievements");

                    b.Navigation("appointmentRegistrations");

                    b.Navigation("appointments");

                    b.Navigation("ratings");

                    b.Navigation("receipts");
                });

            modelBuilder.Entity("soul_whisper.Models.Private.Data.Patient", b =>
                {
                    b.Navigation("appointmentRegistrations");

                    b.Navigation("appointments");

                    b.Navigation("doctorRatings");

                    b.Navigation("habits");

                    b.Navigation("receipts");
                });
#pragma warning restore 612, 618
        }
    }
}
